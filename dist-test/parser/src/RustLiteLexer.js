"use strict";
// Generated from src/RustLite.g4 by ANTLR 4.13.1
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RustLiteLexer = void 0;
const antlr = __importStar(require("antlr4ng"));
class RustLiteLexer extends antlr.Lexer {
    constructor(input) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RustLiteLexer._ATN, RustLiteLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }
    get grammarFileName() { return "RustLite.g4"; }
    get literalNames() { return RustLiteLexer.literalNames; }
    get symbolicNames() { return RustLiteLexer.symbolicNames; }
    get ruleNames() { return RustLiteLexer.ruleNames; }
    get serializedATN() { return RustLiteLexer._serializedATN; }
    get channelNames() { return RustLiteLexer.channelNames; }
    get modeNames() { return RustLiteLexer.modeNames; }
    static get _ATN() {
        if (!RustLiteLexer.__ATN) {
            RustLiteLexer.__ATN = new antlr.ATNDeserializer().deserialize(RustLiteLexer._serializedATN);
        }
        return RustLiteLexer.__ATN;
    }
    get vocabulary() {
        return RustLiteLexer.vocabulary;
    }
}
exports.RustLiteLexer = RustLiteLexer;
RustLiteLexer.T__0 = 1;
RustLiteLexer.T__1 = 2;
RustLiteLexer.T__2 = 3;
RustLiteLexer.T__3 = 4;
RustLiteLexer.T__4 = 5;
RustLiteLexer.T__5 = 6;
RustLiteLexer.T__6 = 7;
RustLiteLexer.T__7 = 8;
RustLiteLexer.T__8 = 9;
RustLiteLexer.T__9 = 10;
RustLiteLexer.T__10 = 11;
RustLiteLexer.T__11 = 12;
RustLiteLexer.T__12 = 13;
RustLiteLexer.T__13 = 14;
RustLiteLexer.T__14 = 15;
RustLiteLexer.T__15 = 16;
RustLiteLexer.T__16 = 17;
RustLiteLexer.T__17 = 18;
RustLiteLexer.T__18 = 19;
RustLiteLexer.T__19 = 20;
RustLiteLexer.T__20 = 21;
RustLiteLexer.T__21 = 22;
RustLiteLexer.T__22 = 23;
RustLiteLexer.T__23 = 24;
RustLiteLexer.T__24 = 25;
RustLiteLexer.T__25 = 26;
RustLiteLexer.T__26 = 27;
RustLiteLexer.T__27 = 28;
RustLiteLexer.T__28 = 29;
RustLiteLexer.T__29 = 30;
RustLiteLexer.T__30 = 31;
RustLiteLexer.T__31 = 32;
RustLiteLexer.T__32 = 33;
RustLiteLexer.T__33 = 34;
RustLiteLexer.T__34 = 35;
RustLiteLexer.T__35 = 36;
RustLiteLexer.T__36 = 37;
RustLiteLexer.T__37 = 38;
RustLiteLexer.T__38 = 39;
RustLiteLexer.T__39 = 40;
RustLiteLexer.T__40 = 41;
RustLiteLexer.T__41 = 42;
RustLiteLexer.INT = 43;
RustLiteLexer.BOOL = 44;
RustLiteLexer.IDENTIFIER = 45;
RustLiteLexer.U8_TYPE = 46;
RustLiteLexer.U16_TYPE = 47;
RustLiteLexer.U32_TYPE = 48;
RustLiteLexer.U64_TYPE = 49;
RustLiteLexer.I8_TYPE = 50;
RustLiteLexer.I16_TYPE = 51;
RustLiteLexer.I32_TYPE = 52;
RustLiteLexer.I64_TYPE = 53;
RustLiteLexer.BOOL_TYPE = 54;
RustLiteLexer.STRING = 55;
RustLiteLexer.METHOD_ACCESSOR = 56;
RustLiteLexer.VECTOR_MODULE_NAME = 57;
RustLiteLexer.WS = 58;
RustLiteLexer.COMMENT = 59;
RustLiteLexer.channelNames = [
    "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
];
RustLiteLexer.literalNames = [
    null, "'('", "')'", "'-'", "'*'", "'/'", "'%'", "'+'", "'>'", "'<'",
    "'=='", "'!='", "'<='", "'>='", "'!'", "'&&'", "'||'", "'{'", "'}'",
    "';'", "'let'", "'mut'", "':'", "'='", "'if'", "'else'", "'while'",
    "'break'", "'continue'", "','", "'()'", "'->'", "'return'", "'fn'",
    "'new'", "'vec'", "'['", "']'", "'.'", "'push'", "'pop'", "'len'",
    "'println'", null, null, null, "'u8'", "'u16'", "'u32'", "'u64'",
    "'i8'", "'i16'", "'i32'", "'i64'", "'bool'", null, "'::'", "'Vec'"
];
RustLiteLexer.symbolicNames = [
    null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null, null, null, "INT",
    "BOOL", "IDENTIFIER", "U8_TYPE", "U16_TYPE", "U32_TYPE", "U64_TYPE",
    "I8_TYPE", "I16_TYPE", "I32_TYPE", "I64_TYPE", "BOOL_TYPE", "STRING",
    "METHOD_ACCESSOR", "VECTOR_MODULE_NAME", "WS", "COMMENT"
];
RustLiteLexer.modeNames = [
    "DEFAULT_MODE",
];
RustLiteLexer.ruleNames = [
    "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7",
    "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15",
    "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23",
    "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31",
    "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39",
    "T__40", "T__41", "INT", "BOOL", "IDENTIFIER", "U8_TYPE", "U16_TYPE",
    "U32_TYPE", "U64_TYPE", "I8_TYPE", "I16_TYPE", "I32_TYPE", "I64_TYPE",
    "BOOL_TYPE", "STRING", "METHOD_ACCESSOR", "VECTOR_MODULE_NAME",
    "WS", "COMMENT",
];
RustLiteLexer._serializedATN = [
    4, 0, 59, 351, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5,
    2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2,
    13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7,
    19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
    26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7,
    32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2,
    39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7,
    45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
    52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7,
    58, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1,
    7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1,
    12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1,
    18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1,
    22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1,
    25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
    27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 31, 1,
    31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1,
    34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1,
    38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1,
    41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 4, 42, 259, 8, 42, 11, 42, 12, 42, 260, 1, 43, 1,
    43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 272, 8, 43, 1, 44, 1, 44, 5,
    44, 276, 8, 44, 10, 44, 12, 44, 279, 9, 44, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1,
    46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1,
    50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1,
    53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 5, 54, 320, 8, 54, 10, 54, 12, 54, 323, 9,
    54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 4, 57, 335, 8,
    57, 11, 57, 12, 57, 336, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 5, 58, 345, 8, 58, 10,
    58, 12, 58, 348, 9, 58, 1, 58, 1, 58, 0, 0, 59, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7,
    15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18,
    37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29,
    59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40,
    81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50, 101,
    51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 1, 0, 6,
    1, 0, 48, 57, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 3,
    0, 10, 10, 13, 13, 34, 34, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 357, 0, 1,
    1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0,
    0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0,
    0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0,
    0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0,
    0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0,
    0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0,
    0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0,
    0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0,
    0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0,
    0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1,
    0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0,
    111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 1, 119, 1, 0,
    0, 0, 3, 121, 1, 0, 0, 0, 5, 123, 1, 0, 0, 0, 7, 125, 1, 0, 0, 0, 9, 127, 1, 0, 0, 0, 11, 129,
    1, 0, 0, 0, 13, 131, 1, 0, 0, 0, 15, 133, 1, 0, 0, 0, 17, 135, 1, 0, 0, 0, 19, 137, 1, 0,
    0, 0, 21, 140, 1, 0, 0, 0, 23, 143, 1, 0, 0, 0, 25, 146, 1, 0, 0, 0, 27, 149, 1, 0, 0, 0,
    29, 151, 1, 0, 0, 0, 31, 154, 1, 0, 0, 0, 33, 157, 1, 0, 0, 0, 35, 159, 1, 0, 0, 0, 37, 161,
    1, 0, 0, 0, 39, 163, 1, 0, 0, 0, 41, 167, 1, 0, 0, 0, 43, 171, 1, 0, 0, 0, 45, 173, 1, 0,
    0, 0, 47, 175, 1, 0, 0, 0, 49, 178, 1, 0, 0, 0, 51, 183, 1, 0, 0, 0, 53, 189, 1, 0, 0, 0,
    55, 195, 1, 0, 0, 0, 57, 204, 1, 0, 0, 0, 59, 206, 1, 0, 0, 0, 61, 209, 1, 0, 0, 0, 63, 212,
    1, 0, 0, 0, 65, 219, 1, 0, 0, 0, 67, 222, 1, 0, 0, 0, 69, 226, 1, 0, 0, 0, 71, 230, 1, 0,
    0, 0, 73, 232, 1, 0, 0, 0, 75, 234, 1, 0, 0, 0, 77, 236, 1, 0, 0, 0, 79, 241, 1, 0, 0, 0,
    81, 245, 1, 0, 0, 0, 83, 249, 1, 0, 0, 0, 85, 258, 1, 0, 0, 0, 87, 271, 1, 0, 0, 0, 89, 273,
    1, 0, 0, 0, 91, 280, 1, 0, 0, 0, 93, 283, 1, 0, 0, 0, 95, 287, 1, 0, 0, 0, 97, 291, 1, 0,
    0, 0, 99, 295, 1, 0, 0, 0, 101, 298, 1, 0, 0, 0, 103, 302, 1, 0, 0, 0, 105, 306, 1, 0, 0,
    0, 107, 310, 1, 0, 0, 0, 109, 315, 1, 0, 0, 0, 111, 326, 1, 0, 0, 0, 113, 329, 1, 0, 0,
    0, 115, 334, 1, 0, 0, 0, 117, 340, 1, 0, 0, 0, 119, 120, 5, 40, 0, 0, 120, 2, 1, 0, 0, 0,
    121, 122, 5, 41, 0, 0, 122, 4, 1, 0, 0, 0, 123, 124, 5, 45, 0, 0, 124, 6, 1, 0, 0, 0, 125,
    126, 5, 42, 0, 0, 126, 8, 1, 0, 0, 0, 127, 128, 5, 47, 0, 0, 128, 10, 1, 0, 0, 0, 129, 130,
    5, 37, 0, 0, 130, 12, 1, 0, 0, 0, 131, 132, 5, 43, 0, 0, 132, 14, 1, 0, 0, 0, 133, 134,
    5, 62, 0, 0, 134, 16, 1, 0, 0, 0, 135, 136, 5, 60, 0, 0, 136, 18, 1, 0, 0, 0, 137, 138,
    5, 61, 0, 0, 138, 139, 5, 61, 0, 0, 139, 20, 1, 0, 0, 0, 140, 141, 5, 33, 0, 0, 141, 142,
    5, 61, 0, 0, 142, 22, 1, 0, 0, 0, 143, 144, 5, 60, 0, 0, 144, 145, 5, 61, 0, 0, 145, 24,
    1, 0, 0, 0, 146, 147, 5, 62, 0, 0, 147, 148, 5, 61, 0, 0, 148, 26, 1, 0, 0, 0, 149, 150,
    5, 33, 0, 0, 150, 28, 1, 0, 0, 0, 151, 152, 5, 38, 0, 0, 152, 153, 5, 38, 0, 0, 153, 30,
    1, 0, 0, 0, 154, 155, 5, 124, 0, 0, 155, 156, 5, 124, 0, 0, 156, 32, 1, 0, 0, 0, 157, 158,
    5, 123, 0, 0, 158, 34, 1, 0, 0, 0, 159, 160, 5, 125, 0, 0, 160, 36, 1, 0, 0, 0, 161, 162,
    5, 59, 0, 0, 162, 38, 1, 0, 0, 0, 163, 164, 5, 108, 0, 0, 164, 165, 5, 101, 0, 0, 165,
    166, 5, 116, 0, 0, 166, 40, 1, 0, 0, 0, 167, 168, 5, 109, 0, 0, 168, 169, 5, 117, 0, 0,
    169, 170, 5, 116, 0, 0, 170, 42, 1, 0, 0, 0, 171, 172, 5, 58, 0, 0, 172, 44, 1, 0, 0, 0,
    173, 174, 5, 61, 0, 0, 174, 46, 1, 0, 0, 0, 175, 176, 5, 105, 0, 0, 176, 177, 5, 102,
    0, 0, 177, 48, 1, 0, 0, 0, 178, 179, 5, 101, 0, 0, 179, 180, 5, 108, 0, 0, 180, 181, 5,
    115, 0, 0, 181, 182, 5, 101, 0, 0, 182, 50, 1, 0, 0, 0, 183, 184, 5, 119, 0, 0, 184, 185,
    5, 104, 0, 0, 185, 186, 5, 105, 0, 0, 186, 187, 5, 108, 0, 0, 187, 188, 5, 101, 0, 0,
    188, 52, 1, 0, 0, 0, 189, 190, 5, 98, 0, 0, 190, 191, 5, 114, 0, 0, 191, 192, 5, 101,
    0, 0, 192, 193, 5, 97, 0, 0, 193, 194, 5, 107, 0, 0, 194, 54, 1, 0, 0, 0, 195, 196, 5,
    99, 0, 0, 196, 197, 5, 111, 0, 0, 197, 198, 5, 110, 0, 0, 198, 199, 5, 116, 0, 0, 199,
    200, 5, 105, 0, 0, 200, 201, 5, 110, 0, 0, 201, 202, 5, 117, 0, 0, 202, 203, 5, 101,
    0, 0, 203, 56, 1, 0, 0, 0, 204, 205, 5, 44, 0, 0, 205, 58, 1, 0, 0, 0, 206, 207, 5, 40,
    0, 0, 207, 208, 5, 41, 0, 0, 208, 60, 1, 0, 0, 0, 209, 210, 5, 45, 0, 0, 210, 211, 5, 62,
    0, 0, 211, 62, 1, 0, 0, 0, 212, 213, 5, 114, 0, 0, 213, 214, 5, 101, 0, 0, 214, 215, 5,
    116, 0, 0, 215, 216, 5, 117, 0, 0, 216, 217, 5, 114, 0, 0, 217, 218, 5, 110, 0, 0, 218,
    64, 1, 0, 0, 0, 219, 220, 5, 102, 0, 0, 220, 221, 5, 110, 0, 0, 221, 66, 1, 0, 0, 0, 222,
    223, 5, 110, 0, 0, 223, 224, 5, 101, 0, 0, 224, 225, 5, 119, 0, 0, 225, 68, 1, 0, 0, 0,
    226, 227, 5, 118, 0, 0, 227, 228, 5, 101, 0, 0, 228, 229, 5, 99, 0, 0, 229, 70, 1, 0,
    0, 0, 230, 231, 5, 91, 0, 0, 231, 72, 1, 0, 0, 0, 232, 233, 5, 93, 0, 0, 233, 74, 1, 0,
    0, 0, 234, 235, 5, 46, 0, 0, 235, 76, 1, 0, 0, 0, 236, 237, 5, 112, 0, 0, 237, 238, 5,
    117, 0, 0, 238, 239, 5, 115, 0, 0, 239, 240, 5, 104, 0, 0, 240, 78, 1, 0, 0, 0, 241, 242,
    5, 112, 0, 0, 242, 243, 5, 111, 0, 0, 243, 244, 5, 112, 0, 0, 244, 80, 1, 0, 0, 0, 245,
    246, 5, 108, 0, 0, 246, 247, 5, 101, 0, 0, 247, 248, 5, 110, 0, 0, 248, 82, 1, 0, 0, 0,
    249, 250, 5, 112, 0, 0, 250, 251, 5, 114, 0, 0, 251, 252, 5, 105, 0, 0, 252, 253, 5,
    110, 0, 0, 253, 254, 5, 116, 0, 0, 254, 255, 5, 108, 0, 0, 255, 256, 5, 110, 0, 0, 256,
    84, 1, 0, 0, 0, 257, 259, 7, 0, 0, 0, 258, 257, 1, 0, 0, 0, 259, 260, 1, 0, 0, 0, 260, 258,
    1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 86, 1, 0, 0, 0, 262, 263, 5, 116, 0, 0, 263, 264,
    5, 114, 0, 0, 264, 265, 5, 117, 0, 0, 265, 272, 5, 101, 0, 0, 266, 267, 5, 102, 0, 0,
    267, 268, 5, 97, 0, 0, 268, 269, 5, 108, 0, 0, 269, 270, 5, 115, 0, 0, 270, 272, 5, 101,
    0, 0, 271, 262, 1, 0, 0, 0, 271, 266, 1, 0, 0, 0, 272, 88, 1, 0, 0, 0, 273, 277, 7, 1, 0,
    0, 274, 276, 7, 2, 0, 0, 275, 274, 1, 0, 0, 0, 276, 279, 1, 0, 0, 0, 277, 275, 1, 0, 0,
    0, 277, 278, 1, 0, 0, 0, 278, 90, 1, 0, 0, 0, 279, 277, 1, 0, 0, 0, 280, 281, 5, 117, 0,
    0, 281, 282, 5, 56, 0, 0, 282, 92, 1, 0, 0, 0, 283, 284, 5, 117, 0, 0, 284, 285, 5, 49,
    0, 0, 285, 286, 5, 54, 0, 0, 286, 94, 1, 0, 0, 0, 287, 288, 5, 117, 0, 0, 288, 289, 5,
    51, 0, 0, 289, 290, 5, 50, 0, 0, 290, 96, 1, 0, 0, 0, 291, 292, 5, 117, 0, 0, 292, 293,
    5, 54, 0, 0, 293, 294, 5, 52, 0, 0, 294, 98, 1, 0, 0, 0, 295, 296, 5, 105, 0, 0, 296, 297,
    5, 56, 0, 0, 297, 100, 1, 0, 0, 0, 298, 299, 5, 105, 0, 0, 299, 300, 5, 49, 0, 0, 300,
    301, 5, 54, 0, 0, 301, 102, 1, 0, 0, 0, 302, 303, 5, 105, 0, 0, 303, 304, 5, 51, 0, 0,
    304, 305, 5, 50, 0, 0, 305, 104, 1, 0, 0, 0, 306, 307, 5, 105, 0, 0, 307, 308, 5, 54,
    0, 0, 308, 309, 5, 52, 0, 0, 309, 106, 1, 0, 0, 0, 310, 311, 5, 98, 0, 0, 311, 312, 5,
    111, 0, 0, 312, 313, 5, 111, 0, 0, 313, 314, 5, 108, 0, 0, 314, 108, 1, 0, 0, 0, 315,
    321, 5, 34, 0, 0, 316, 320, 8, 3, 0, 0, 317, 318, 5, 92, 0, 0, 318, 320, 5, 34, 0, 0, 319,
    316, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 320, 323, 1, 0, 0, 0, 321, 319, 1, 0, 0, 0, 321,
    322, 1, 0, 0, 0, 322, 324, 1, 0, 0, 0, 323, 321, 1, 0, 0, 0, 324, 325, 5, 34, 0, 0, 325,
    110, 1, 0, 0, 0, 326, 327, 5, 58, 0, 0, 327, 328, 5, 58, 0, 0, 328, 112, 1, 0, 0, 0, 329,
    330, 5, 86, 0, 0, 330, 331, 5, 101, 0, 0, 331, 332, 5, 99, 0, 0, 332, 114, 1, 0, 0, 0,
    333, 335, 7, 4, 0, 0, 334, 333, 1, 0, 0, 0, 335, 336, 1, 0, 0, 0, 336, 334, 1, 0, 0, 0,
    336, 337, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 339, 6, 57, 0, 0, 339, 116, 1, 0, 0, 0,
    340, 341, 5, 47, 0, 0, 341, 342, 5, 47, 0, 0, 342, 346, 1, 0, 0, 0, 343, 345, 8, 5, 0,
    0, 344, 343, 1, 0, 0, 0, 345, 348, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 346, 347, 1, 0, 0,
    0, 347, 349, 1, 0, 0, 0, 348, 346, 1, 0, 0, 0, 349, 350, 6, 58, 0, 0, 350, 118, 1, 0, 0,
    0, 8, 0, 260, 271, 277, 319, 321, 336, 346, 1, 6, 0, 0
];
RustLiteLexer.vocabulary = new antlr.Vocabulary(RustLiteLexer.literalNames, RustLiteLexer.symbolicNames, []);
RustLiteLexer.decisionsToDFA = RustLiteLexer._ATN.decisionToState.map((ds, index) => new antlr.DFA(ds, index));
